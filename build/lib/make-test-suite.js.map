{"version":3,"sources":["../../src/lib/make-test-suite.js"],"names":[],"mappings":"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","file":"lib/make-test-suite.js","sourcesContent":["import erte from 'erte'\nimport { readdirSync, lstatSync } from 'fs'\nimport { join } from 'path'\nimport { collect } from 'catchment'\nimport getTests from '../lib/mask'\nimport { equal, throws } from '../assert'\n\n/**\n * Make a test suite to test against a mask.\n * @param {string} path Path to the mask file or directory of files.\n * @param {MakeTestSuiteConf} [conf] Configuration for making test suites.\n * @param {({new(): Context}|{new(): Context}[]|{})} [conf.context] Single or multiple context constructors or objects to initialise for each test.\n * @param {(input: string, ...contexts?: Context[]) => string} [conf.getResults] A function which should return results of a test.\n * @param {(...contexts?: Context[]) => Writable} [conf.streamResult] A function which returns a stream to be ended with the input specified in the mask to get the test result. The stream should implement both _Writable_ and _Readable_ interfaces as its output will be accumulated and compared against the expected output of the mask. This method is useful for testing _Transform_ streams.\n * @param {(input: string, ...contexts?: Context[]) => { fn: function, args?: any[], message?: (string|RegExp) }} [conf.getThrowsConfig] A function which should return a configuration for [`assert-throws`](https://github.com/artdecocode/assert-throws), including `fn` and `args`, when testing an error.\n * @param {(results: any) => string} [conf.mapActual] An optional function to get a value to test against `expected` mask property from results. By default, the full result is used.\n * @param {(results: any, props: Object.<string, (string|object)>) => void} [conf.assertResults] A function containing any addition assertions on the results. The results from `getResults` and a map of expected values extracted from the mask (where `jsonProps` are parsed into JS objects) will be passed as arguments.\n * @param {string[]} [conf.jsonProps] Any additional properties to extract from the mask, and parse as _JSON_ values.\n * @param {RegExp} [conf.splitRe=\"/^\\/\\/ /gm\"] A regular expression used to detect the beginning of a new test in a mask file. Default `/^\\/\\/ /gm`.\n */\nexport default function makeTestSuite(path, conf) {\n  const pathStat = lstatSync(path)\n  if (pathStat.isFile()) {\n    return makeATestSuite(path, conf)\n  } else if (pathStat.isDirectory()) {\n    const content = readdirSync(path)\n    const res = content.reduce((acc, node) => {\n      const newPath = join(path, node)\n      return {\n        ...acc,\n        [node]: makeTestSuite(newPath, conf),\n      }\n    }, {})\n    return res\n  }\n}\n\n// The `expected` property of the mask will be compared against the actual value returned by the `getActual` function. To test for the correct error message, the `error` property will be tested using `assert-throws` configuration returned by `getThrowsConfig` function. Any additional tests can be performed with `customTest` function, which will receive any additional properties extracted from the mask using `customProps` and `jsonProps`. The JSON properties will be parsed into an object.\n\nconst parseProps = (props, jsonProps) => {\n  const parsedRest = Object.keys(props).reduce((ac, k) => {\n    try {\n      const val = jsonProps.includes(k) ? JSON.parse(props[k]) : props[k]\n      ac[k] = val\n      return ac\n    } catch (err) {\n      throw new Error(`Could not parse JSON property \"${k}\": ${err.message}.`)\n    }\n  }, {})\n  return parsedRest\n}\n\n/**\n * Create a new test.\n * @param {{ streamResult: () => Writable }} param\n */\nconst makeTest = ({\n  input, error, getThrowsConfig, streamResult, getResults, expected,\n  assertResults, props, mapActual,\n}) => {\n  const test = async (...contexts) => {\n    if (error) {\n      if (!getThrowsConfig)\n        throw new Error('No \"getThrowsConfig\" function is given.')\n      const throwsConfig = getThrowsConfig(input, ...contexts)\n      await assertError(throwsConfig, error)\n      return\n    } else if (streamResult) {\n      const rs = streamResult(...contexts)\n      rs.end(input)\n      const actual = await collect(rs)\n      assertExpected(actual, expected)\n      return\n    }\n\n    if (!getResults) return\n\n    const results = await getResults(input, ...contexts)\n\n    if (expected) {\n      const actual = mapActual(results)\n      if ((typeof actual).toLowerCase() != 'string')\n        throw new Error('The actual result is not an a string. Use \"mapActual\" function to map to a string result.')\n      assertExpected(actual, expected)\n    }\n    if (assertResults) {\n      assertResults(results, props)\n    }\n  }\n  return test\n}\n\nconst makeATestSuite = (maskPath, conf) => {\n  if (!conf) throw new Error('No configuration is given. A config should at least contain either a \"getThrowsConfig\", \"getResults\" or \"streamResult\" functions.')\n  const {\n    context,\n    getResults,\n    streamResult,\n    getThrowsConfig,\n    mapActual = a => a,\n    assertResults,\n    jsonProps = [],\n    splitRe,\n  } = conf\n  const tests = getTests({ path: maskPath, splitRe })\n\n  const t = tests.reduce((acc, {\n    name, input, expected, error, onError, ...rest\n  }) => {\n    let setupError\n    let props\n    if (name in acc) setupError = `Repeated use of the test name \"${name}\".`\n    try {\n      props = parseProps(rest, jsonProps)\n    } catch ({ message }) {\n      setupError = message\n    }\n\n    const test = setupError ? () => {\n      throw new Error(setupError)\n    } : makeTest({\n      input, error, getThrowsConfig, streamResult, getResults, expected,\n      assertResults, props, mapActual,\n    })\n\n    acc[name] = async (...args) => {\n      try {\n        await test(...args)\n      } catch (err) {\n        onError(err) // show location in the error stack. TODO: keep mask line\n      }\n    }\n    return acc\n  }, context ? { context } : {})\n  return t\n}\n\nconst assertError = async (throwsConfig, error) => {\n  await throws({\n    ...throwsConfig,\n    message: error,\n  })\n}\n\nconst assertExpected = (result, expected) => {\n  if (!expected) return\n  try {\n    equal(result, expected)\n  } catch (err) {\n    const e = erte(result, expected)\n    console.log(e) // eslint-disable-line no-console\n    throw err\n  }\n}\n\n/* documentary types/make-test-suite.xml */\n/**\n * @typedef {{ end: (s: string) => void }} Writable\n * @prop {() => void} [_init] A function to initialise the context.\n * @prop {() => void} [_destroy] A function to destroy the context.\n *\n * @typedef {Object} MakeTestSuiteConf Configuration for making test suites.\n * @prop {({new(): Context}|{new(): Context}[]|{})} [context] Single or multiple context constructors or objects to initialise for each test.\n * @prop {(input: string, ...contexts?: Context[]) => string} [getResults] A function which should return results of a test.\n * @prop {(...contexts?: Context[]) => Writable} [streamResult] A function which returns a stream to be ended with the input specified in the mask to get the test result. The stream should implement both _Writable_ and _Readable_ interfaces as its output will be accumulated and compared against the expected output of the mask. This method is useful for testing _Transform_ streams.\n * @prop {(input: string, ...contexts?: Context[]) => { fn: function, args?: any[], message?: (string|RegExp) }} [getThrowsConfig] A function which should return a configuration for [`assert-throws`](https://github.com/artdecocode/assert-throws), including `fn` and `args`, when testing an error.\n * @prop {(results: any) => string} [mapActual] An optional function to get a value to test against `expected` mask property from results. By default, the full result is used.\n * @prop {(results: any, props: Object.<string, (string|object)>) => void} [assertResults] A function containing any addition assertions on the results. The results from `getResults` and a map of expected values extracted from the mask (where `jsonProps` are parsed into JS objects) will be passed as arguments.\n * @prop {string[]} [jsonProps] Any additional properties to extract from the mask, and parse as _JSON_ values.\n * @prop {RegExp} [splitRe=\"/^\\/\\/ /gm\"] A regular expression used to detect the beginning of a new test in a mask file. Default `/^\\/\\/ /gm`.\n */\n"]}