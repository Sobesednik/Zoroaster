{"version":3,"sources":["../../src/lib/make-test-suite.js"],"names":[],"mappings":"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","file":"lib/make-test-suite.js","sourcesContent":["import { c as color } from 'erte'\nimport { readdirSync, lstatSync } from 'fs'\nimport { join } from 'path'\nimport { collect } from 'catchment'\nimport { deepEqual } from 'assert-diff'\nimport getTests from '../lib/mask'\nimport { throws } from '../assert'\nimport { assertExpected } from './mask/'\nimport runFork from './mask/fork'\n\n/**\n * Make a test suite to test against a mask.\n * @param {string} path Path to the mask file or directory of files.\n * @param {MakeTestSuiteConf} [conf] Configuration for making test suites.\n * @param {({new(): Context}|{new(): Context}[]|{})} [conf.context] Single or multiple context constructors or objects to initialise for each test.\n * @param {(input: string, ...contexts?: Context[]) => string} [conf.getResults] A possibly async function which should return results of a test. If it returns a string, it will be compared against the `expected` property of the mask using string comparison. If it returns an object, its deep equality with `expected` can be tested by adding `'expected'` to the `jsonProps`.\n * @param {(...contexts?: Context[]) => Transform|Promise.<Transform>} [conf.getTransform] A possibly async function which returns a _Transform_ stream to be ended with the input specified in the mask. Its output will be accumulated and compared against the expected output of the mask.\n * @param {(input: string, ...contexts?: Context[]) => Readable|Promise.<Readable>} [conf.getReadable] A possibly async function which returns a _Readable_ stream constructed with the input from the mask. Its output will be stored in memory and compared against the expected output of the mask. This could be used to test a forked child process, for example.\n * @param {string|ForkConfig} [conf.fork] A path to the module to fork with input as arguments, and compare its output against the `code`, `stdout` and `stderr` properties of the mask. Arguments with whitespace should be wrapped in speech marks, i.e. `'` or `\"`. Additionally, `ForkConfig` with `module`, `getArgs`, `options` and `getOptions` properties can be passed for more control of how the fork will be started.\n * @param {(input: string, ...contexts?: Context[]) => { fn: function, args?: any[], message?: (string|RegExp) }} [conf.getThrowsConfig] A function which should return a configuration for [`assert-throws`](https://github.com/artdecocode/assert-throws), including `fn` and `args`, when testing an error.\n * @param {(results: any) => string} [conf.mapActual] An optional function to get a value to test against `expected` mask property from results. By default, the full result is used.\n * @param {(results: any, props: Object.<string, (string|object)>) => void} [conf.assertResults] A function containing any addition assertions on the results. The results from `getResults` and a map of expected values extracted from the mask (where `jsonProps` are parsed into JS objects) will be passed as arguments.\n * @param {string[]} [conf.jsonProps] Any additional properties to extract from the mask, and parse as _JSON_ values.\n * @param {RegExp} [conf.splitRe=\"/^\\/\\/ /gm\"] A regular expression used to detect the beginning of a new test in a mask file. Default `/^\\/\\/ /gm`.\n */\nexport default function makeTestSuite(path, conf) {\n  const pathStat = lstatSync(path)\n  if (pathStat.isFile()) {\n    return makeATestSuite(path, conf)\n  } else if (pathStat.isDirectory()) {\n    const content = readdirSync(path)\n    const res = content.reduce((acc, node) => {\n      const newPath = join(path, node)\n      return {\n        ...acc,\n        [node]: makeTestSuite(newPath, conf),\n      }\n    }, {})\n    return res\n  }\n}\n\n// The `expected` property of the mask will be compared against the actual value returned by the `getActual` function. To test for the correct error message, the `error` property will be tested using `assert-throws` configuration returned by `getThrowsConfig` function. Any additional tests can be performed with `customTest` function, which will receive any additional properties extracted from the mask using `customProps` and `jsonProps`. The JSON properties will be parsed into an object.\n\nconst parseProps = (props, jsonProps) => {\n  const parsedRest = Object.keys(props).reduce((ac, k) => {\n    try {\n      const val = jsonProps.includes(k) ? JSON.parse(props[k]) : props[k]\n      ac[k] = val\n      return ac\n    } catch (err) {\n      throw new Error(`Could not parse JSON property \"${k}\": ${err.message}.`)\n    }\n  }, {})\n  return parsedRest\n}\n\nconst assertHasExpected = (expected) => {\n  if (expected === undefined) throw new Error('No expected output was given.')\n}\n\n/**\n * Create a new test.\n * @param {{ getTransform: () => Transform, getReadable: (input: string) => Readable }} param\n */\nconst makeTest = ({\n  input, error, getThrowsConfig, getTransform, getResults, expected,\n  assertResults, props, mapActual, getReadable, forkConfig,\n}) => {\n  const test = async (...contexts) => {\n    let results\n    if (error) {\n      if (!getThrowsConfig)\n        throw new Error('No \"getThrowsConfig\" function is given.')\n      const throwsConfig = getThrowsConfig(input, ...contexts)\n      await assertError(throwsConfig, error)\n      return\n    } else if (getTransform) {\n      assertHasExpected(expected)\n      const rs = await getTransform(...contexts)\n      rs.end(input)\n      results = await collect(rs)\n    } else if (getReadable) {\n      assertHasExpected(expected)\n      const rs = await getReadable(input, ...contexts)\n      results = await collect(rs)\n    } else if (forkConfig) {\n      const r = await runFork({\n        forkConfig,\n        input,\n        props,\n        contexts,\n      })\n      results = getResults ? await getResults(input, ...contexts) : r\n    } else if (!getResults) {\n      throw new Error('Nothing was tested.')\n    } else {\n      results = await getResults(input, ...contexts)\n    }\n\n    if (expected !== undefined) {\n      const actual = mapActual(results)\n      if (typeof expected != 'string') { // already parsed\n        deepEqual(actual, expected)\n      } else if ((typeof actual).toLowerCase() != 'string') {\n        throw new Error('The actual result is not an a string. Use \"mapActual\" function to map to a string result, or add \"expected\" to \"jsonProps\".')\n      } else {\n        assertExpected(actual, expected)\n      }\n    }\n    if (assertResults) {\n      assertResults(results, props)\n    }\n  }\n  return test\n}\n\nconst makeATestSuite = (maskPath, conf) => {\n  if (!conf) throw new Error('No configuration is given. A config should at least contain either a \"getThrowsConfig\", \"getResults\", \"getTransform\" or \"getReadable\" functions.')\n  const {\n    context,\n    getResults,\n    getTransform,\n    getReadable,\n    getThrowsConfig,\n    mapActual = a => a,\n    assertResults,\n    jsonProps = [],\n    splitRe,\n    fork: forkConfig,\n  } = conf\n  const tests = getTests({ path: maskPath, splitRe })\n\n  const t = tests.reduce((acc, {\n    name, input, error, onError, ...rest\n  }) => {\n    let setupError\n    let props\n    let expected\n    if (name in acc)\n      setupError = `Repeated use of the test name \"${name}\".`\n    try {\n      ({ expected, ...props } = parseProps(rest, jsonProps))\n    } catch ({ message }) {\n      setupError = message\n    }\n\n    let test\n    if (setupError) {\n      test = () => { throw new Error(setupError) }\n    } else {\n      test = makeTest({\n        input, error, getThrowsConfig, getTransform, getReadable, getResults, expected,\n        assertResults, props, mapActual, forkConfig,\n      })\n    }\n\n    acc[name] = async (...args) => {\n      try {\n        await test(...args)\n      } catch (err) {\n        if (process.env.DEBUG) console.log(color(err.stack, 'red'))\n        onError(err) // show location in the error stack. TODO: keep mask line\n      }\n    }\n    return acc\n  }, context ? { context } : {})\n  return t\n}\n\nconst assertError = async (throwsConfig, error) => {\n  await throws({\n    ...throwsConfig,\n    message: error,\n  })\n}\n\n/* documentary types/context.xml */\n/**\n * @typedef {Object} Context A context made with a constructor.\n * @prop {() => void} [_init] A function to initialise the context.\n * @prop {() => void} [_destroy] A function to destroy the context.\n */\n\n/* documentary types/fork-config.xml */\n/**\n * @typedef {import('child_process').ForkOptions} ForkOptions\n *\n * @typedef {Object} ForkConfig Parameters for forking.\n * @prop {string} module The path to the module to fork.\n * @prop {(args: string[], ...contexts?: Context[]) => string[]|Promise.<string[]>} [getArgs] The function to get arguments to pass the forked processed based on parsed masks input and contexts.\n * @prop {(...contexts?: Context[]) => ForkOptions} [getOptions] The function to get options for the forked processed, such as `ENV` and `cwd`, based on contexts.\n * @prop {ForkOptions} [options] Options for the forked processed, such as `ENV` and `cwd`.\n * @prop {[RegExp, string][]} [inputs] Inputs to push to `stdin` when `stdout` writes data. The inputs are kept on stack, and taken off the stack when the RegExp matches the written data.\n * @prop {[RegExp, string][]} [stderrInputs] Inputs to push to `stdin` when `stderr` writes data (similar to `inputs`).\n * @prop {boolean|{stderr: Writable, stdout: Writable}} [log=false] Whether to pipe data from `stdout`, `stderr` to the process's streams. If an object is passed, the output will be piped to streams specified as its `stdout` and `stderr` properties. Default `false`.\n */\n\n/* documentary types/make-test-suite.xml */\n/**\n * @typedef {import('stream').Transform} Transform\n * @typedef {import('stream').Readable} Readable\n *\n * @typedef {Object} MakeTestSuiteConf Configuration for making test suites.\n * @prop {({new(): Context}|{new(): Context}[]|{})} [context] Single or multiple context constructors or objects to initialise for each test.\n * @prop {(input: string, ...contexts?: Context[]) => string} [getResults] A possibly async function which should return results of a test. If it returns a string, it will be compared against the `expected` property of the mask using string comparison. If it returns an object, its deep equality with `expected` can be tested by adding `'expected'` to the `jsonProps`.\n * @prop {(...contexts?: Context[]) => Transform|Promise.<Transform>} [getTransform] A possibly async function which returns a _Transform_ stream to be ended with the input specified in the mask. Its output will be accumulated and compared against the expected output of the mask.\n * @prop {(input: string, ...contexts?: Context[]) => Readable|Promise.<Readable>} [getReadable] A possibly async function which returns a _Readable_ stream constructed with the input from the mask. Its output will be stored in memory and compared against the expected output of the mask. This could be used to test a forked child process, for example.\n * @prop {string|ForkConfig} [fork] A path to the module to fork with input as arguments, and compare its output against the `code`, `stdout` and `stderr` properties of the mask. Arguments with whitespace should be wrapped in speech marks, i.e. `'` or `\"`. Additionally, `ForkConfig` with `module`, `getArgs`, `options` and `getOptions` properties can be passed for more control of how the fork will be started.\n * @prop {(input: string, ...contexts?: Context[]) => { fn: function, args?: any[], message?: (string|RegExp) }} [getThrowsConfig] A function which should return a configuration for [`assert-throws`](https://github.com/artdecocode/assert-throws), including `fn` and `args`, when testing an error.\n * @prop {(results: any) => string} [mapActual] An optional function to get a value to test against `expected` mask property from results. By default, the full result is used.\n * @prop {(results: any, props: Object.<string, (string|object)>) => void} [assertResults] A function containing any addition assertions on the results. The results from `getResults` and a map of expected values extracted from the mask (where `jsonProps` are parsed into JS objects) will be passed as arguments.\n * @prop {string[]} [jsonProps] Any additional properties to extract from the mask, and parse as _JSON_ values.\n * @prop {RegExp} [splitRe=\"/^\\/\\/ /gm\"] A regular expression used to detect the beginning of a new test in a mask file. Default `/^\\/\\/ /gm`.\n */\n"]}