{"version":3,"sources":["../../src/lib/bin.js"],"names":[],"mappings":"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","file":"lib/bin.js","sourcesContent":["import { lstat, readdir } from 'fs'\nimport { resolve, join } from 'path'\nimport makePromise from 'makepromise'\nimport TestSuite from './TestSuite'\n\n/**\n * Remove modules cached by require.\n */\nexport function clearRequireCache() {\n  Object.keys(require.cache).forEach((key) => {\n    delete require.cache[key]\n  })\n}\n\n/**\n * Create a root test suite.\n * @param {string[]} paths\n */\nexport const buildRootTestSuite = async (paths, timeout) => {\n  const tree = await paths.reduce(async (acc, path) => {\n    const accRes = await acc\n    const r = await requireTests(path)\n    if (!r) return accRes\n    return {\n      ...accRes,\n      [path]: r,\n    }\n  }, {})\n  const ts = new TestSuite(\n    'Zoroaster Root Test Suite', tree, null, null, timeout,\n  )\n  return ts\n}\n\nconst replaceFilename = (filename) => {\n  return filename.replace(/\\.js$/, '')\n}\n\n/**\n * Recursively construct Test Suites tree from a directory path.\n * @param {string} dir Path to the directory.\n */\nasync function buildDirectory(dir) {\n  const content = await makePromise(readdir, dir)\n  const res = content.reduce(async (acc, node) => {\n    const accRes = await acc\n    const path = join(dir, node)\n    const stat = await makePromise(lstat, path)\n    let r\n    let name\n    if (stat.isFile()) {\n      const p = resolve(path)\n      r = require(p) // await import(p)\n      name = replaceFilename(node)\n    } else if (stat.isDirectory()) {\n      r = await buildDirectory(path)\n      name = node\n    }\n    return {\n      ...accRes,\n      [name]: r,\n    }\n  }, {})\n  return res\n}\n\n/**\n * Recursively load a file/directory tests as a tree into memory.\n * @param {string} path Path to a test suite\n */\nasync function requireTests(path) {\n  try {\n    const res = await makePromise(lstat, path)\n    if (res.isFile()) {\n      const p = resolve(path)\n      const tests = require(p)\n      return tests\n    } else if (res.isDirectory()) {\n      const dir = await buildDirectory(path)\n      return dir\n    }\n  } catch (err) {\n    // file or directory does not exist\n    // eslint-disable-next-line\n    console.error(err)\n  }\n}"]}