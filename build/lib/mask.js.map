{"version":3,"sources":["../../src/lib/mask.js"],"names":[],"mappings":"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","file":"lib/mask.js","sourcesContent":["import mismatch from 'mismatch'\nimport { readFileSync } from 'fs'\n\n/**\n * A function to construct tests from a mask file.\n * @param {string} path Path to the mask file.\n */\nconst getTests = ({\n  path, splitRe = /^\\/\\/ /gm,\n}) => {\n  const m = `${readFileSync(path)}`\n  const t = m.split(splitRe).filter(a => a)\n  const tests = t.map((test) => {\n    const [name, total] = split(test, '\\n')\n    const [input, body] = split(total, '\\n\\n/*')\n\n    const expected = mismatch(\n      /\\/\\* +(.+) +\\*\\/\\n([\\s\\S]+?)\\n\\/\\*\\*\\//g,\n      body,\n      ['key', 'value'],\n    ).reduce((acc, { key, value }) => {\n      return {\n        ...acc,\n        [key]: value,\n      }\n    }, {})\n    return {\n      name,\n      input,\n      ...expected,\n    }\n  })\n\n  const lines = m.split('\\n')\n  /**\n   * A function to be called on error in a test.\n   * @param {string} name\n   * @param {Error} error\n   * @throws {Error} An error with a stack trace pointing at the line in the mask file.\n   */\n  const onError = (name, error) => {\n    const lineRe = new RegExp(`^// +${name}`)\n    const lineNumber = lines.reduce((acc, current, index) => {\n      if (acc) return acc // found\n      if (lineRe.test(current)) return index + 1\n      return acc\n    }, null)\n    const err = new Error(error.message)\n    // possibly also remember custom test stack later\n    const stack = makeStack(error.message, name, path, lineNumber)\n    err.stack = stack\n    throw err\n  }\n  const testsWithOnError = tests.map(({ name, ...rest }) => {\n    /**\n     * @type {function}\n     * @param {Error} error An error with a stack trace pointing at the line in the mask file.\n     */\n    const boundOnError = onError.bind(null, name)\n    return {\n      ...rest,\n      name,\n      onError: boundOnError,\n    }\n  })\n  return testsWithOnError\n}\n\nconst makeStack = (message, name, path, lineNumber) => {\n  return `Error: ${message}\\n    at ${name} (${path}:${lineNumber}:1)`\n}\n\nconst split = (s, del) => {\n  const nl = s.indexOf(del)\n  const first = s.substr(0, nl)\n  const second = s.substr(nl + 1)\n  return [first, second]\n}\n\nexport default getTests"]}