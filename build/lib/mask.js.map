{"version":3,"sources":["../../src/lib/mask.js"],"names":[],"mappings":"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","file":"lib/mask.js","sourcesContent":["import mismatch from 'mismatch'\nimport { readFileSync } from 'fs'\n\nconst makeRegex = (keys = []) => {\n  const m = /[\\s\\S]+?/\n  const ms = m.source\n  const n = '\\\\n'\n  const titleAndBody = `^// (.+?)${n}(${ms})${n.repeat(2)}`\n  const vals = keys.map(k => {\n    const s = `(?:/\\\\* *${k} *\\\\*/${n}(${ms})${n}/\\\\*\\\\*/)?`\n    return s\n  })\n  const allVals = vals.join('\\\\s*')\n  const regex = new RegExp(`${titleAndBody}${allVals}`, 'gm')\n  return regex\n}\n\n/**\n * A function to construct tests from a mask file.\n * @param {string} path Path to the mask file.\n * @param {string[]} [keys] Properties of each test to extract. Default `['expected']`.\n */\nconst getTests = (path, keys = ['expected']) => {\n  const m = `${readFileSync(path)}`\n  const re = makeRegex(keys)\n  const tests = mismatch(\n    re,\n    m,\n    ['name', 'input', ...keys],\n  )\n  const lines = m.split('\\n')\n  /**\n   * A function to be called on error in a test.\n   * @param {string} name\n   * @param {Error} error\n   * @throws {Error} An error with a stack trace pointing at the line in the mask file.\n   */\n  const onError = (name, error) => {\n    const lineRe = new RegExp(`^// +${name}`)\n    const lineNumber = lines.reduce((acc, current, index) => {\n      if (acc) return acc // found\n      if (lineRe.test(current)) return index + 1\n      return acc\n    }, null)\n    const err = new Error(error.message)\n    // possibly also remember custom test stack later\n    const stack = makeStack(error.message, name, path, lineNumber)\n    err.stack = stack\n    throw err\n  }\n  const testsWithOnError = tests.map(({ name, ...rest }) => {\n    /**\n     * @type {function}\n     * @param {Error} error An error with a stack trace pointing at the line in the mask file.\n     */\n    const boundOnError = onError.bind(null, name)\n    return {\n      ...rest,\n      name,\n      onError: boundOnError,\n    }\n  })\n  return testsWithOnError\n}\n\nconst makeStack = (message, name, path, lineNumber) => {\n  return `Error: ${message}\\n    at ${name} (${path}:${lineNumber}:1)`\n}\n\nexport default getTests"]}