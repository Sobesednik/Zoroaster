{"version":3,"sources":["../../../src/lib/mask/fork.js"],"names":[],"mappings":"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","file":"lib/mask/fork.js","sourcesContent":["import { deepEqual } from 'assert-diff'\nimport { fork } from 'spawncommand'\nimport mismatch from 'mismatch'\nimport { assertExpected } from './'\n\n/**\n * @param {string|ForkConfig} forkConfig Parameters for forking.\n * @param {string} forkConfig.module The path to the module to fork.\n * @param {(args: string[], ...contexts?: Context[]) => string[]|Promise.<string[]>} [forkConfig.getArgs] The function to get arguments to pass the forked processed based on parsed masks input and contexts.\n * @param {(...contexts?: Context[]) => ForkOptions} [forkConfig.getOptions] The function to get options for the forked processed, such as `ENV` and `cwd`, based on contexts.\n * @param {ForkOptions} [forkConfig.options] Options for the forked processed, such as `ENV` and `cwd`.\n * @param {string[]} args\n * @param {Context[]} contexts\n */\nexport const getForkArguments = async (forkConfig, args, context) => {\n  /**\n   * @type {ForkOptions}\n   */\n  const stdioOpts = {\n    stdio: 'pipe',\n  }\n  if (typeof forkConfig == 'string') {\n    return {\n      mod: forkConfig,\n      args,\n      options: stdioOpts,\n    }\n  }\n  const {\n    module: mod,\n    getArgs: getForkArgs,\n    options,\n    getOptions,\n  } = forkConfig\n  const a = getForkArgs ? await getForkArgs(args, ...context) : args\n  let opt\n  if (options) {\n    opt = {\n      ...stdioOpts,\n      ...options,\n    }\n  } else if (getOptions) {\n    const o = await getOptions(...context)\n    opt = {\n      ...stdioOpts,\n      ...o,\n    }\n  }\n  return {\n    mod,\n    args: a,\n    options: opt,\n  }\n}\n\n\n/**\n * @param {string|ForkConfig} forkConfig\n */\nconst runFork = async ({\n  forkConfig,\n  input,\n  props: { stdout, stderr, code },\n  contexts,\n}) => {\n  const a = getArgs(input)\n  const { mod, args, options } = await getForkArguments(forkConfig, a, contexts)\n  const { promise } = fork(mod, args, options)\n  const res = await promise\n  const { code: c, stdout: o, stderr: e } = res\n  assertForkOutput(o, stdout)\n  assertForkOutput(e, stderr)\n  if (code && c != code)\n    throw new Error(`Fork exited with code ${c} != ${code}`)\n  return res\n}\n\nconst assertForkOutput = (actual, expected) => {\n  if (typeof expected == 'string') {\n    assertExpected(actual, expected)\n  } else if (expected) {\n    const a = JSON.parse(actual)\n    deepEqual(a, expected)\n  }\n}\n\nexport const getArgs = (input) => {\n  const res = mismatch(/(['\"])?([\\s\\S]+?)\\1(\\s+|$)/g, input, ['q', 'a'])\n    .map(({ a }) => a)\n  return res\n}\n\nexport default runFork\n\n/* documentary types/context.xml */\n/**\n * @typedef {Object} Context A context made with a constructor.\n * @prop {() => void} [_init] A function to initialise the context.\n * @prop {() => void} [_destroy] A function to destroy the context.\n */\n\n/* documentary types/fork-config.xml */\n/**\n * @typedef {import('child_process').ForkOptions} ForkOptions\n *\n * @typedef {Object} ForkConfig Parameters for forking.\n * @prop {string} module The path to the module to fork.\n * @prop {(args: string[], ...contexts?: Context[]) => string[]|Promise.<string[]>} [getArgs] The function to get arguments to pass the forked processed based on parsed masks input and contexts.\n * @prop {(...contexts?: Context[]) => ForkOptions} [getOptions] The function to get options for the forked processed, such as `ENV` and `cwd`, based on contexts.\n * @prop {ForkOptions} [options] Options for the forked processed, such as `ENV` and `cwd`.\n */\n"]}