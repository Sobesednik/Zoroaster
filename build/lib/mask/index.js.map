{"version":3,"sources":["../../../src/lib/mask/index.js"],"names":[],"mappings":"AAAA,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI;AACtB,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM;;AAE7B,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EAClD,GAAG,CAAC;IACF,KAAK,CAAC,MAAM,CAAC,CAAC,QAAQ;EACxB,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC;IACZ,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,QAAQ;IAC/B,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;IACd,KAAK,CAAC;EACR;AACF;;;;;;;;;AASA,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACjE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;;EAE9C,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;EACnB,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;EAER,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACrB,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IACzB,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;;IAErB,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;IACvB,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;;IAErB,KAAK,CAAC,KAAK,CAAC,EAAE;IACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI;IACrB,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO;EACjD;EACA,QAAQ,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO;AAC7B","file":"lib/mask/index.js","sourcesContent":["import erte from 'erte'\nimport { equal } from 'assert'\n\nexport const assertExpected = (result, expected) => {\n  try {\n    equal(result, expected)\n  } catch (err) {\n    const e = erte(result, expected)\n    console.log(e) // eslint-disable-line no-console\n    throw err\n  }\n}\n\n/**\n * Write data to `stdin` when data from the `stdout` matches the regexp.\n * @param {Readable} readable\n * @param {Writable} stdin\n * @param {[RegExp, string][]} inputs\n * @param {Writable} log\n */\nexport const setupAnswers = (readable, stdin, inputs = [], log) => {\n  if (log) readable.on('data', d => log.write(d))\n\n  let [a, ...rest] = inputs\n  if (!a) return\n\n  const handler = (d) => {\n    const [regexp, answer] = a\n    if (!regexp.test(d)) return\n\n    const an = `${answer}\\n`\n    if (log) log.write(an)\n\n    stdin.write(an)\n    ;([a, ...rest] = rest)\n    if (!a) readable.removeListener('data', handler)\n  }\n  readable.on('data', handler)\n}\n\n/** @typedef {import('stream').Readable} Readable */\n/** @typedef {import('stream').Writable} Writable */"]}