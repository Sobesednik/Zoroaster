{"version":3,"sources":["../../src/lib/Test.js"],"names":[],"mappings":"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","file":"lib/Test.js","sourcesContent":["import { EOL } from 'os'\nimport promto from 'promto'\nimport { indent, filterStack, destroyContexts, evaluateContext } from '.'\n\nexport default class Test {\n  /**\n   * Create a new test object.\n   * @constructor\n   * @param {string} name Name of the test.\n   * @param {function} fn Function as specified in the specs.\n   * @param {Number} timeout Timeout in ms after which to throw the timeout error.\n   * @param {object|function} context The context object, function or constructor.\n   */\n  constructor(name, fn, timeout, context) {\n    this.timeout = timeout || 2000\n    this.name = name\n    this.fn = fn\n    this.started = null\n    this.finished = null\n    this.error = null\n    this.result = null\n\n    this.context = context\n  }\n\n  /**\n   * Run the test.\n   * @param {function} notify - notify function\n   */\n  async run(notify = () => {}) {\n    notify({\n      type: 'test-start',\n      name: this.name,\n    })\n    const res = await runTest(this)\n    notify({\n      test: this,\n      type: 'test-end',\n      name: this.name,\n      result: this.dump(),\n      error: this.error,\n    })\n    return res\n  }\n  dump() {\n    return dumpResult(this)\n  }\n  hasErrors() {\n    return this.error !== null\n  }\n\n  /**\n   * Evaluate test's context or contexts.\n   */\n  async _evaluateContext() {\n    if (this.context === undefined) {\n      this.contexts = []\n      return\n    }\n\n    if (Array.isArray(this.context)) {\n      const ep = this.context.map(evaluateContext)\n      this.contexts = await Promise.all(ep)\n      return\n    }\n\n    const c = await evaluateContext(this.context)\n    this.contexts = [c]\n  }\n  get isFocused() {\n    return this.name.startsWith('!')\n  }\n}\n\nconst TICK = '\\x1b[32m \\u2713 \\x1b[0m'\nconst CROSS = '\\x1b[31m \\u2717 \\x1b[0m'\n\nfunction dumpResult(test) {\n  if (test.error === null) {\n    return `${TICK} ${test.name}`\n  } else {\n    return `${CROSS} ${test.name}` + EOL\n      + indent(filterStack(test), ' | ')\n  }\n}\n\n/**\n * Create a promise for a test function.\n * @param {function} fn function to execute\n * @param {object[]} ctx Contexts to pass as arguments in order\n * @return {Promise} A promise to execute function.\n */\nasync function createTestPromise(fn, contexts) {\n  const res = await fn(...contexts)\n  return res\n}\n\n/**\n * Asynchronously runs the test\n * @param {Test} test A test to run.\n * @return {Promise.<Test>} A promise resolved with the run test.\n */\nasync function runTest(test) {\n  test.started = new Date()\n\n  try {\n    const evaluate = test._evaluateContext()\n    await promto(evaluate, test.timeout, 'Evaluate')\n\n    const run = createTestPromise(test.fn, test.contexts)\n    test.result = await promto(run, test.timeout, 'Test')\n  } catch (err) {\n    test.error = err\n  }\n\n  // even if test failed, destroy context\n  try {\n    const destroy = destroyContexts(test.contexts || []) // if hasn't evaluated\n    test.destroyResult = await promto(destroy, test.timeout, 'Destroy')\n  } catch (err) {\n    test.error = err\n  }\n\n  test.finished = new Date()\n  return test\n}\n"]}