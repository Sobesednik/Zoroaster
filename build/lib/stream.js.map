{"version":3,"sources":["../../src/lib/stream.js"],"names":[],"mappings":"AAAA,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM;AACjC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE;AACvB,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;AAqBlD,MAAM,CAAC,QAAQ,CAAC,0BAA0B,CAAC,CAAC,CAAC;EAC3C,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;EACxB,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC;IACvB,UAAU,CAAC,CAAC,IAAI;IAChB,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MACtD,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;QACnD,cAAc,CAAC,IAAI,CAAC,IAAI;MAC1B,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;QACxD,cAAc,CAAC,GAAG,CAAC;MACrB;MACA,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,cAAc,CAAC,KAAK,CAAC;MACnC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;MACvC,QAAQ,CAAC;IACX,CAAC;EACH,CAAC;EACD,MAAM,CAAC;AACT;;;;;;;;;;;;;AAaA,MAAM,CAAC,QAAQ,CAAC,6BAA6B,CAAC,CAAC,CAAC;EAC9C,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC;IACvB,UAAU,CAAC,CAAC,IAAI;IAChB,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAC3D,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;QACnD,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAChD,IAAI,CAAC,IAAI,CAAC,GAAG;MACf,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;QAC7B,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAClD,IAAI,CAAC,IAAI,CAAC,GAAG;MACf;MACA,QAAQ,CAAC;IACX,CAAC;EACH,CAAC;EACD,MAAM,CAAC;AACT;;;;;;;;;AASA,MAAM,CAAC,QAAQ,CAAC,0BAA0B,CAAC,CAAC,CAAC;EAC3C,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC;IACvB,UAAU,CAAC,CAAC,IAAI;IAChB,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAC1D,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;QACV,MAAM,CAAC,QAAQ,CAAC;MAClB;MACA,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;MACpB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAC3B,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;MACtB,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC;MACnB,IAAI,CAAC,IAAI,CAAC,GAAG;MACb,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;MACzC,IAAI,CAAC,IAAI,CAAC,GAAG;MACb,IAAI,CAAC,IAAI,CAAC,GAAG;MACb,QAAQ,CAAC;IACX,CAAC;EACH,CAAC;EACD,MAAM,CAAC;AACT","file":"lib/stream.js","sourcesContent":["import { Transform } from 'stream'\nimport { EOL } from 'os'\nimport { getPadding, indent, filterStack } from '.'\n\n/**\n * The whole file needs testing when you are especially (depressed)\n * excited.\n */\n\n/**\n * Assigns test suite stack to each data object. Maintains a\n * test suite stack, and if a notification with type\n * 'test-suite-start' is coming, the name of the test suite\n * is pushed onto the stack. When 'test-suite-end' notification\n * comes, the top item is popped from the stack.\n * data[type]\n * data[name]\n * @returns {Transfrom} A transform stream maintaining a test suite\n * stack.\n * @todo: call back with an error if test-suite-end came with\n * a different test-suite than the one currently on top of the stack.\n * @todo: check for data to be an object to control this error\n */\nexport function createTestSuiteStackStream() {\n  const testSuiteStack = []\n  const ts = new Transform({\n    objectMode: true,\n    transform({ type, name, ...props }, encoding, callback) {\n      if (type == 'test-suite-start' && name != 'default') {\n        testSuiteStack.push(name)\n      } else if (type == 'test-suite-end' && name != 'default') {\n        testSuiteStack.pop()\n      }\n      const stack = testSuiteStack.slice()\n      ts.push({ type, name, stack, ...props })\n      callback()\n    },\n  })\n  return ts\n}\n\n/**\n * Prints test suites' name when they begin, and tests' names\n * when they finish. Each test must have a stack property\n * representing its error stack, therefore data must first\n * go through TestSuiteStack stream.\n * data[name]\n * data[type]\n * data[result]\n * data[stack]\n * @returns {Transform}\n */\nexport function createProgressTransformStream() {\n  const ts = new Transform({\n    objectMode: true,\n    transform({ type, name, stack, result }, encoding, callback) {\n      if (type == 'test-suite-start' && name != 'default') {\n        this.push(indent(name, getPadding(stack.length)))\n        this.push(EOL)\n      } else if (type == 'test-end') {\n        this.push(indent(result, getPadding(stack.length)))\n        this.push(EOL)\n      }\n      callback()\n    },\n  })\n  return ts\n}\n\n/**\n * Prints an error in red and error stack below it.\n * data[error]\n * data[error][stack]\n * data[stack]\n * data[name]\n */\nexport function createErrorTransformStream() {\n  const ts = new Transform({\n    objectMode: true,\n    transform({ error, stack, name, test }, encoding, callback) {\n      if (!error) {\n        return callback()\n      }\n      this.push('\\x1b[31m')\n      this.push(stack.join(' > '))\n      this.push(` > ${name}`)\n      this.push('\\x1b[0m')\n      this.push(EOL)\n      this.push(indent(filterStack(test), '  '))\n      this.push(EOL)\n      this.push(EOL)\n      callback()\n    },\n  })\n  return ts\n}\n\n/* This needs to be a `drain`* */\n// function createSuccessTransformStream() {\n//     let successCount = 0\n//     const ts = new Transform({ objectMode: true })\n//     ts._transform = (data, encoding, callback) => {\n//         successCount++\n//         callback()\n//     }\n//     return ts\n// }\n/* * A drain is a structure that will collect and buffer from\n * a stream, and return (e.g., resolved promise) when stream\n * finished.\n */\n"]}