{"version":3,"sources":["../../src/lib/run.js"],"names":[],"mappings":"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","file":"lib/run.js","sourcesContent":["import { watchFile, unwatchFile } from 'fs'\nimport Catchment from 'catchment'\nimport { EOL } from 'os'\nimport {\n  createErrorTransformStream,\n  createProgressTransformStream,\n  createTestSuiteStackStream,\n} from './stream'\nimport { buildRootTestSuite, clearRequireCache } from './bin'\n\n\nfunction watchFiles(files, callback) {\n  files.forEach((file) => {\n    // console.log(`Watching ${file} for changes...`)\n    watchFile(file, callback)\n  })\n}\nfunction unwatchFiles(files) {\n  files.forEach((file) => {\n    // console.log(`Unwatching ${file}`)\n    unwatchFile(file)\n  })\n}\n\n/**\n *\n * @param {string[]} paths Paths to test suites.\n * @param {boolean} [watch] Whether to watch files for changes.\n * @param {string[]} [_currentlyWatching]\n */\nexport default async function run({\n  paths,\n  watch,\n  timeout,\n}, _currentlyWatching = []) {\n  clearRequireCache()\n  const rootTestSuite = await buildRootTestSuite(paths, timeout)\n\n  if (watch) {\n    unwatchFiles(_currentlyWatching)\n    const newCurrentlyWatching = Object.keys(require.cache)\n    watchFiles(newCurrentlyWatching, async () => {\n      // we can also re-run only changed test suites\n      await run({\n        paths,\n        watch,\n        timeout,\n      }, newCurrentlyWatching)\n    })\n  }\n\n  const stack = createTestSuiteStackStream()\n\n  const rs = createErrorTransformStream()\n  const ts = createProgressTransformStream()\n  stack.pipe(ts).pipe(process.stdout)\n  stack.pipe(rs)\n\n  const { promise: errorsPromise } = new Catchment({ rs })\n\n  const count = {\n    total: 0,\n    error: 0,\n  }\n\n  const notify = (data) => {\n    if (typeof data != 'object') return\n    stack.write(data)\n    if (data.type == 'test-end') {\n      count.total++\n      if (data.error) {\n        count.error++\n      }\n    }\n  }\n  await rootTestSuite.runInSequence(notify, rootTestSuite.hasFocused)\n\n  stack.end()\n  const errorsCatchment = await errorsPromise\n  process.stdout.write(EOL)\n  process.stdout.write(errorsCatchment)\n\n  process.stdout.write(`ðŸ¦…  Executed ${count.total} tests`)\n  if (count.error) {\n    process.stdout.write(\n      `: ${count.error} error${count.error > 1 ? 's' : ''}`\n    )\n  }\n  process.stdout.write(`.${EOL}`)\n\n  process.removeAllListeners('exit')\n\n  process.once('exit', () => process.exit(count.error))\n}\n"]}