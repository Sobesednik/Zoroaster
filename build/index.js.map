{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"AAAA,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI;AAC7B,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,YAAY;;AAElC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC;;;;;;;;;AASzG,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC/B,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;IAC3B,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC;IACb,CAAC,CAAC,CAAC,OAAO;EACZ,CAAC;EACD,MAAM,CAAC;AACT;;AAEA,MAAM,CAAC,OAAO,CAAC;;AAEf,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK","file":"index.js","sourcesContent":["import { resolve } from 'path'\nimport { fork } from 'spawncommand'\n\nconst BIN = resolve(__dirname, 'bin', process.env.ALAMODE_ENV == 'test-build' ? 'index.js' : 'alamode.js')\n\n/**\n * Start zoroaster process, and return a child process with a `promise` property.\n * @param {string[]} args An array of strings as arguments\n * @param {import('child_process').SpawnOptions} options Options to pass when creating child process\n * @returns {ChildProcess} An instance of a ChildProcess, with `.promise` property,\n * which will be resolved when tests are finished.\n */\nfunction run(args, options = {}) {\n  const proc = fork(BIN, args, {\n    stdio: 'pipe',\n    ...options,\n  })\n  return proc\n}\n\nexport default run\n\nexport { default as makeTestSuite } from './lib/make-test-suite'\n\n/* documentary types/make-test-suite.xml */\n/**\n * @typedef {Object} Context A context made with a constructor.\n * @prop {() => void} [_init] A function to initialise the context.\n * @prop {() => void} [_destroy] A function to destroy the context.\n *\n * @typedef {Object} MakeTestSuiteConf Configuration for making test suites.\n * @prop {({new(): Context}|{new(): Context}[]|{})} [context] Single or multiple context constructors or objects to initialise for each test.\n * @prop {(input: string, ...contexts?: Context[]) => string} [getResults] A function which should return results of a test.\n * @prop {(input: string, ...contexts?: Context[]) => { fn: function, args?: any[], message?: (string|RegExp) }} [getThrowsConfig] A function which should return a configuration for [`assert-throws`](https://github.com/artdecocode/assert-throws), including `fn` and `args`, when testing an error.\n * @prop {(results: any) => string} [mapActual] An optional function to get a value to test against `expected` mask property from results. By default, the full result is used.\n * @prop {(results: any, props: Object.<string, (string|object)>) => void} [assertResults] A function containing any addition assertions on the results. The results from `getResults` and a map of expected values extracted from the mask using `customProps` and `jsonProps` will be passed as first and second arguments.\n * @prop {string[]} [customProps] An array of custom properties' names to extract from the mask.\n * @prop {string[]} [jsonProps] Any additional properties to extract from the mask, and parse as _JSON_ values.\n */\n"]}